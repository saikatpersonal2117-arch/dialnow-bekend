import { Router } from "express";
import { prisma } from "../prisma/client.js";
import bcrypt from "bcryptjs";
import { z } from "zod";
import { sign } from "../libs/jwt.js";

const r = Router();

const signupSchema = z.object({
  email: z.string().email(),
  password: z.string().min(4),
  name: z.string().min(1),
  role: z.enum(["CLIENT", "FREELANCER"])
});

r.post("/signup", async (req, res) => {
  const data = signupSchema.parse(req.body);
  const exists = await prisma.user.findUnique({ where: { email: data.email }});
  if (exists) return res.status(409).json({ error: "Email already used" });
  const hash = await bcrypt.hash(data.password, 10);
  const user = await prisma.user.create({ data: { ...data, password: hash }});
  const token = sign({ id: user.id, role: user.role });
  res.json({ user: { id: user.id, email: user.email, name: user.name, role: user.role }, token });
});

r.post("/login", async (req, res) => {
  const { email, password } = req.body as { email: string; password: string };
  const user = await prisma.user.findUnique({ where: { email }});
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ error: "Invalid credentials" });
  }
  const token = sign({ id: user.id, role: user.role });
  res.json({ user: { id: user.id, email: user.email, name: user.name, role: user.role }, token });
});

export default r;
