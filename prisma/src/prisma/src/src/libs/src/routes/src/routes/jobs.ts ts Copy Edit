import { Router } from "express";
import { prisma } from "../prisma/client.js";
import { z } from "zod";
import { authGuard } from "../libs/jwt.js";

const r = Router();

r.get("/", async (req, res) => {
  const q = String(req.query.q || "").toLowerCase();
  const cat = String(req.query.cat || "");
  const jobs = await prisma.job.findMany({
    where: {
      AND: [
        q ? { OR: [
          { title: { contains: q, mode: "insensitive" } },
          { description: { contains: q, mode: "insensitive" } },
          { tags: { hasSome: q.split(/\s+/).filter(Boolean) } }
        ]} : {},
        cat ? { category: cat } : {}
      ]
    },
    orderBy: { createdAt: "desc" },
  });
  res.json({ jobs });
});

const jobSchema = z.object({
  title: z.string().min(2),
  description: z.string().min(5),
  budget: z.number().int().optional(),
  category: z.string().min(2),
  tags: z.array(z.string()).default([]),
});

r.post("/", authGuard, async (req: any, res) => {
  const me = await prisma.user.findUnique({ where: { id: req.user.id }});
  if (!me || me.role !== "CLIENT") return res.status(403).json({ error: "Only clients can post jobs" });
  const data = jobSchema.parse(req.body);
  const job = await prisma.job.create({ data: { ...data, clientId: me.id }});
  res.status(201).json({ job });
});

r.get("/:id", async (req, res) => {
  const job = await prisma.job.findUnique({ where: { id: req.params.id }});
  if (!job) return res.status(404).json({ error: "Not found" });
  res.json({ job });
});

export default r;
